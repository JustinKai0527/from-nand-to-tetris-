class SnakeGame {
    
    field snake s;
    field int direction;
    field Random block;
    field int score;

    constructor SnakeGame new() {
        let s = snake.new();
        let direction = 0;
        let score = 0;
        return this;
    }

    method void dispose() {
        do s.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void moveSnake() {
        if (direction = 1) { do s.moveUp(); }
        if (direction = 2) { do s.moveDown(); }
        if (direction = 3) { do s.moveLeft(); }
        if (direction = 4) { do s.moveRight(); }
        do Sys.wait(5);  // delays the next movement
        return;
    }
    
    method void check_collide() {
        if (s.get_x() = block.get_x() & s.get_y() = block.get_y()) {
            do block.print(s.get_x(), s.get_y());
            let score = score + 1;
            do Output.moveCursor(22,7);
            do Output.printInt(score);
        }
        return;
    }

   method void run() {
      var char key;  // the key currently pressed by the user
      var int seed;
      var boolean exit;
      let exit = false;

      // do Output.printString("press a lucky number to start");  //get the randseed
      let seed = Keyboard.readInt("press a lucky number to start");
      do Screen.clearScreen();


      do Output.moveCursor(22,0);
	   do Output.printString("Score: 0");
      //setup block random seed
      let seed = seed + 1202;
      let block = Random.new(seed);
      do block.print(s.get_x()+seed, s.get_y());

      while (~exit) {
      // waits for a key to be pressed
         do check_collide();
         while ((key = 0) & ~exit) {
            do check_collide();
            do s.gameover();
            if (s.get_status())  { let exit = true; } 
            else{
               let key = Keyboard.keyPressed();
               do moveSnake();
            }
            do check_collide();
            do s.gameover();
         }

         do check_collide();
         do s.gameover();
         if (s.get_status())  { let exit = true; } 
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131 & (direction > 2 | direction < 2)) { let direction = 1; }   // up arrow and avoid down
         if (key = 133 & (direction > 1 | direction < 1)) { let direction = 2; }   // down arrow and avoid up
         if (key = 130 & (direction > 4 | direction < 4)) { let direction = 3; }   // left arrow and avoid right
         if (key = 132 & (direction > 3 | direction < 3)) { let direction = 4; }   // right arrow and avoid left

         // waits for the key to be released
         while (~(key = 0) & ~exit) {
            do check_collide();
            do s.gameover();
            if (s.get_status())  { let exit = true; } 
            else {
               let key = Keyboard.keyPressed();
               do moveSnake();
            }
            do check_collide();
            do s.gameover();
         }

         // if(~s.get_status()) { do Output.printString("WTF");}

      } // while

         do Output.moveCursor(10,27);
         do Output.printString("Game Over");
         return;
      }
}